import {
  Box,
  Grid,
  GridItem,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  SimpleGrid,
  CircularProgress,
  CircularProgressLabel,
  Text,
  Image,
} from "@chakra-ui/react";
import Plot from "react-plotly.js";
import { CheckIcon, EditIcon, SettingsIcon, CloseIcon } from "@chakra-ui/icons";
import WellTable from "../../Card/WellTable";
import FilterBar from "../../Card/FilterBar";
import SummaryBox from "../../Card/SummaryBox";
import Hero from "../../../../assets/Hero.jpg";
import CustomCard from "../../Card/CustomCard";
import {
  FaCalendarDay,
  FaChartLine,
  FaChartPie,
  FaCheckCircle,
} from "react-icons/fa";
import PropTypes from "prop-types";
import { XCircleIcon } from "@heroicons/react/16/solid";
import { IoCloseCircle, IoCloseCircleSharp } from "react-icons/io5";

// Data yang dibutuhkan
const progressData = [
  { label: "Eksplorasi", value: 85, color: "#3182CE", lineValue: 75 }, // Blue
  { label: "Exploitation", value: 69, color: "#DD6B20", lineValue: 65 }, // Orange
  { label: "Work Over", value: 46, color: "#38A169", lineValue: 55 }, // Green
  { label: "Well Service", value: 68, color: "#805AD5", lineValue: 70 }, // Purple
];

const monthlyData = [
  { month: "Jan", planning: 1000, actual: 800 },
  { month: "Feb", planning: 1200, actual: 900 },
  { month: "Mar", planning: 1500, actual: 1200 },
  { month: "Apr", planning: 1800, actual: 1400 },
  { month: "May", planning: 2000, actual: 1700 },
  { month: "Jun", planning: 2200, actual: 1900 },
  { month: "Jul", planning: 2500, actual: 2100 },
  { month: "Aug", planning: 2700, actual: 2400 },
  { month: "Sep", planning: 3000, actual: 2600 },
  { month: "Oct", planning: 3200, actual: 2900 },
  { month: "Nov", planning: 3500, actual: 3100 },
  { month: "Dec", planning: 3800, actual: 3300 },
];

// Fungsi untuk menghitung data kumulatif
const cumulativeData = (data) => {
  let cumulative = 0;
  return data.map((item) => {
    cumulative += item;
    return cumulative;
  });
};

// Komponen untuk grafik batang dengan line chart kumulatif di dalamnya
const CombinedBarLineChart = () => (
  <Plot
    data={[
      {
        x: monthlyData.map((item) => item.month),
        y: monthlyData.map((item) => item.planning),
        type: "bar",
        name: "Perencanaan",
        marker: { color: "#3182CE" },
        text: monthlyData.map((item) => item.planning),
        textposition: "outside",
        yaxis: "y1",
      },
      {
        x: monthlyData.map((item) => item.month),
        y: monthlyData.map((item) => item.actual),
        type: "bar",
        name: "Terealisasi",
        marker: { color: "#38A169" },
        text: monthlyData.map((item) => item.actual),
        textposition: "outside",
        yaxis: "y1",
      },
      {
        x: monthlyData.map((item) => item.month),
        y: cumulativeData(monthlyData.map((item) => item.planning)),
        type: "scatter",
        mode: "lines+markers",
        name: "Kumulatif Perencanaan",
        line: { color: "#3182CE", width: 2 },
        marker: { color: "#3182CE" },
        yaxis: "y2",
      },
      {
        x: monthlyData.map((item) => item.month),
        y: cumulativeData(monthlyData.map((item) => item.actual)),
        type: "scatter",
        mode: "lines+markers",
        name: "Kumulatif Terealisasi",
        line: { color: "#38A169", width: 2 },
        marker: { color: "#38A169" },
        yaxis: "y2",
      },
    ]}
    layout={{
      width: "1100",
      title: "",
      paper_bgcolor: "transparent",
      plot_bgcolor: "transparent",
      barmode: "group",
      xaxis: { automargin: true },
      yaxis: {
        title: "Jumlah",
        side: "left",
        automargin: true,
        showgrid: true,
        zeroline: true,
      },
      yaxis2: {
        title: "Jumlah Kumulatif",
        overlaying: "y",
        side: "right",
        automargin: true,
        showgrid: false,
        zeroline: false,
      },
      showlegend: true,
      legend: { orientation: "h", y: -0.2 },
    }}
    config={{ responsive: true }}
    useResizeHandler={true}
    style={{ width: "100%", height: "100%" }}
  />
);

// Komponen untuk Circular Progress Bar
const CircularProgressBar = ({ label, value, color }) => (
  <Box textAlign="center">
    <CircularProgress value={value} color={color} size="120px">
      <CircularProgressLabel fontSize="xl">{value}%</CircularProgressLabel>
    </CircularProgress>
    <Text mt={2} fontSize="xl">
      {label}
    </Text>
  </Box>
);
CircularProgressBar.propTypes = {
  label: PropTypes.string.isRequired,
  value: PropTypes.number.isRequired,
  color: PropTypes.string.isRequired,
};

const InformationPage = () => {
  return (
    <Box p={4}>
      <Grid templateColumns="repeat(5, 1fr)" gap={4}>
        <GridItem colSpan={5}>
          
            
            
                <Grid templateColumns="repeat(3, 1fr)" gap={4}>
                  <CustomCard
                    icon={FaCalendarDay}
                    count={12}
                    label="Diajukan"
                    bgColor="white"
                    iconBgColor="#ECF2FE"
                    iconColor="#3478ff"
                  />
                  <CustomCard
                    icon={IoCloseCircleSharp}
                    count={5}
                    iconSize={12}
                    label="Ditolak"
                    bgColor="white"
                    iconBgColor="#ECF2FE"
                    iconColor="#E53E3E"
                  />
                  <CustomCard
                    icon={FaCheckCircle}
                    count={12}
                    label="Disetujui"
                    bgColor="white"
                    iconBgColor="#ECF2FE"
                    iconColor="green"
                  />
                </Grid>
                <Box mt={8}>
                  <WellTable />
                </Box>
              
        
        </GridItem>
      </Grid>
    </Box>
  );
};

export default InformationPage;
